[기본 설명]
- 본 설명글은, 본 프로젝트를 기반으로 개발한 서버 프로젝트를 배포하여 네트워크에 오픈하는 일련의 상황에 대한 처리 방식과 노하우를 알려드립니다.

- 아키텍쳐 설명 :
    Springboot 로컬 개발 환경을 구축한 상태에서,
    배포 자동화를 위한 CI/CD 툴인 젠킨스,
    현재 자신이 배포한 서버가 정상적으로 동작하고 있는지 확인하기 위한 모니터링 시스템,
    개발시에 테스트용으로 사용할 테스트 서버,
    테스트 서버에서 사용하는 데이터베이스,
    실제 서비스 배포용으로 사용되는 배포 서버,
    배포 서버에서 사용하는 데이터베이스
    최소한 위와 같은 환경을 구축할 것입니다.

- 로컬 환경 :
    로컬 환경은 Springboot 를 개발하기 위해 필요한 환경을 자유롭게 구성하면 됩니다.
    참고로 도커를 사용하여 배포를 할 것이므로 도커도 설치해둡시다.
    도커를 사용하면 좋은 이유는, 개발시 환경과 배포시 환경간의 차이를 고려하지 않아도 된다는 것으로,
    로컬 환경에서의 테스트가 실제 배포환경 에서의 테스트 결과와 다른 상황을 방지해줍니다.

- 개발 데이터베이스 & 배포 데이터베이스 :
    개발 시점에 사용할 테스트용 데이터베이스와,
    배포 시점에 사용될 배포용 데이터베이스를 준비해야 합니다.
    이것을 분리시켜야 추후 다음 버전 개발시에 현재 실제 사용중인 데이터를 건드리지 않고 안전하게 개발을 진행할 수 있습니다.

- 모니터링 시스템 :
    모종의 이유로 서버가 다운되거나, 혹은 서버에 연결된 특정한 기능이 다운되는 경우가 있을 수 있습니다.
    서버 관리자가 이를 인지하지 못한다면, 대응도 늦어질 수 밖에 없겠죠.
    내가 올린, 그리고 앞으로 올릴 모든 서버의 상태를 감시하고, 만약 이상이 있다면 개발자에게 알려주는 시스템이 필요합니다.
    모니터링 시스템은 관련된 소수 인원이 다루는 것으로, 젠킨스와 동일한 성질을 지녔기에,
    두 서비스는 하나의 인프라를 공유하도록 할 것입니다.(같은 서버에서 접속 포트만 다르게 설정)

- 개발 서버 & 배포 서버 :
    개발 시점에 사용할 테스트 서버와,
    배포 시점에 사용될 배포 서버를 각각 준비합니다.
    앞서 설명했듯, 이렇게 분리를 시켜야 안정적인 서비스 제공이 가능합니다.
    개발 서버의 컴퓨터는 따로 준비할 필요없이, 배포 서버에 포트만 다르게 하여 실행시켜도 좋습니다.

- 젠킨스 :
    만약 내가 서버를 올려둔 상태로, 코드를 수정하여 다시 배포를 해야한다고 가정하면,
    해당 서버에 접속한 후, 수정된 코드를 받아오고, 해당 코드가 현 상황에 잘 동작하는지 테스트하고,
    잠시 현재 배포중인 서버를 종료하고, 수정된 코드를 다시 올려야 할 것입니다.
    이런 일련의 과정을 직접 할 것 없이 Git 브랜치에 push 를 하면 자동으로 수행해주면 편할 것입니다.
    이러한 기능이 바로 CI/CD 라고 하며, 대표적인 툴이 젠킨스입니다.
    모니터링 서비스와 같이 개발자만 사용하는 툴이므로, 두 서비스는 같은 컴퓨터에 포트만 다르게 하여 실행시켜도 좋습니다.

- 진행 준비 :
    배포를 위한 클라우드 서비스는 AWS 를 사용할 것입니다.
    AWS EC2 를 사용하여, 젠킨스, 모니터링 시스템, 개발, 배포 서버를 동작시켜 네트워크 상에 오픈할 것이고,
    AWS RDS 를 사용하여 데이터베이스를 구성할 것이며,
    AWS S3 를 사용하여 파일 저장 및 배포를 할 것입니다.

    즉, AWS 계정이 필요합니다.

    젠킨스의 배포 로직을 실행시키는 트리거는, Git 의 특정 브랜치에 수정된 코드를 push 하는 것으로 할 것이므로,
    Git 계정 역시 필요하며,

    배포시에는 도커를 사용할 것이므로 도커를 설치해주세요.

    마지막으로, 배포할 대상이 되는 Springboot 프로젝트가 로컬에서 개발 가능 상태로 존재하며,
    Git 레포지토리에 올라온 상태면 준비 완료입니다.