[로컬 개발 및 도커 사용법]
- 로컬상 개발을 진행할 때에는 IDE 를 사용하여 Springboot 개발을 진행하면 됩니다.
    개발이 완료되어 배포를 하는 시점에는 도커를 사용하여 테스트를 진행합니다.

- 도커 배포 테스트
    external_files/docker 안의 "개발 서버 빌드 방법.txt" 를 참고하여 진행하면 됩니다.
    개발 서버용 배포를 가정하여 아래에 적습니다.

    (1. 이미지 빌드)
    - Dockerfile-Server-Dev 파일을 기반으로 raillylinker/server_dev:latest 이름의 이미지를 만듭니다.
    > docker image build --pull=true -f Dockerfile-Server-Dev -t raillylinker/server_dev:latest .

    (2. 이미지 파일 저장)
    - 명령어 위치에 server_dev.tar 라는 이름의 이미지 파일을 생성합니다.
    > docker save -o server_dev.tar raillylinker/server_dev:latest

    (3. 사용하지 않는 모든 이미지 삭제)
    - 테스트를 위해 기존 이미지는 일단 제거해둡니다.
    > docker image prune -af

    (4. 이미지 파일에서 이미지 불러오기)
    - 앞서 저장한 이미지 파일에서 이미지를 불러올 수 있는지 테스트 합니다.
    > docker load -i server_dev.tar

    (5. 컨테이너 생성 및 실행)
    - 불러온 raillylinker/server_dev:latest 이미지를 실행하여 서버로서 정상 동작하는지 확인
    - -v 옵션의 ${PWD}\service_logs 부분은 로그 파일을 저장하길 원하는 위치를 지정하세요.
    > docker container run -v ${PWD}\service_logs:/docker_shared_server/server_project/by_product_files/logs -d -e TZ=Asia/Seoul --rm -p8080:8080 --name server_dev raillylinker/server_dev:latest

    (6. 컨테이너 명령창 띄우기)
    - 컨테이너 명령창으로 상황을 확인하거나, 혹은 서비스 포트로 접속하여 제대로 동작하는지 확인합니다.
    > docker container exec -it server_dev sh

    (7. 컨테이너 명령창에서 나가기)
    > exit

    (8. 컨테이너 중단)
    - 테스트를 완료한 컨테이너를 중단합니다.
    > docker container stop server_dev

    (9. 컨테이너 파기)
    - 테스트를 완료한 컨테이너를 파기합니다.
    > docker container rm server_dev

    (10. 사용하지 않는 모든 이미지 삭제)
    - 테스트를 완료한 이미지를 삭제합니다.
    > docker image prune -af

    (11. 배포하기)
    - 여기까지 완료되면 도커 환경에서 정상적으로 동작하는 server_dev.tar 파일을 얻을 수 있습니다.
        배포할 위치의 컴퓨터에 이 파일을 옮기고,

        8. 기존 컨테이너 중단 ->
        9. 기존 컨테이너 파기 ->
        10. 사용하지 않는 모든 이미지 삭제 ->
        4. 이미지 파일에서 이미지 불러오기 ->
        5. 컨테이너 생성 및 실행(-v 옵션에, 로그를 저장할 위치를 선정)

        위 순서대로 실행시키면 배포 완료입니다.