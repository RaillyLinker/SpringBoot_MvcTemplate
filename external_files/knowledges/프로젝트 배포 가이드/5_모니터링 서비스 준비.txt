[모니터링 서비스 준비]
- 서버 상태 확인을 위해 모니터링 툴은 필수라 생각합시다.
    여기서는 Spring Admin 을 사용할 것이고,
    본 프로젝트는 Spring Admin Client 가 적용된 상태입니다.

- 준비
    1. https://github.com/RaillyLinker/SpringBoot_SpringAdmin
        위 레포지토리에서 Spring Admin Server 프로젝트를 가져오세요.
        이것을 기반으로 설명할 것입니다.

    2. application.yml 에 어드민 설정을 합시다.
        server.port : 포트 번호를 설정합니다. 여기서는 8081 포트로 설정했습니다.
        spring.boot.admin.notify : Spring Admin 의 경고 메시지를 받을 이메일 주소를 입력합니다.
        security : 본 서비스를 사용할 계정의 아이디와 비밀번호를 설정합니다.
        mail : notify 에서 사용할 SMTP 정보를 입력합니다.

    3. 준비된 Admin 프로젝트를 실행시켜 동작을 확인하고,
        이상이 없을 경우, Gradle Tasks - build - bootJar 을 실행시키면,
        build/libs 디렉토리 안에,

        springboot_spring_admin-0.0.1-SNAPSHOT.jar

        이러한 이름의 jar 파일이 생성되어 있을 것입니다.

        이를 external_files/docker 위치로 이동시킵니다.

    4. external_files/docker 위치의 "빌드 방법.txt" 파일에 적혀있는 설명대로 진행합니다.
        결과물로, spring_admin.tar 파일이 생성되면,
        이것을 도커로 실행만 시키면 되므로 Spring Admin 배포 준비는 끝입니다.

- AWS EC2 에 배포하기
    1. AWS EC2 에, 앞서 준비된 jar 파일을 배포하려면,
        AWS 콘솔에서 EC2 항목으로 이동한 후,
        petlogon-developer-tools
        라는 인스턴스를 만들어줄 것입니다.
        이 인스턴스에는 CI/CD 툴, 모니터링 툴 등의 개발자에게 필요한 서비스를 올려놓을 용도입니다.

        인스턴스 시작 버튼을 누르고,
        이름은 petlogon-developer-tools, 이미지는 ubuntu Ubuntu Server 24.04 LTS (HVM), SSD Volume Type,
        인스턴스 유형은 t2.small(이정도는 되어야 젠킨스를 돌릴 수 있음), 키페어는 가이드 3번 글에서 만든 키페어를 선택하고,
        보안그룹 생성, 스토리지 구성은 30GiB 범용 SSD gp3

        위와 같이 생성합니다.

    2. 네트워크 및 보안 탭에 탄력적 IP 를 누릅니다.
        탄력적 IP 주소 할당을 누르고,
        태그에 Name 키에 인스턴스 이름과 동일한 값으로 하여 탄력적 IP 를 할당합니다.
        생성된 IP 를 선택하고, 작업 - 탄력적 IP 주소 연결 을 누르고, 앞서 생성한 인스턴스와 연결해줍니다.
        이 작업을 해주는 이유는, EC2 인스턴스의 경우는 중단되었다가 다시 실행되면 그때마다 IP 가 새로 할당됩니다.
        이렇게 IP 가 변경되는 것을 막기 위하여 탄력적 IP 로 미리 IP 를 할당받았다가,
        인스턴스에 연결하는 방식으로 IP 변동을 막는 것입니다.
        즉, 탄력적 IP 의 IP 주소가 앞으로 해당 인스턴스의 IP 가 되는 것입니다.
        주의할 점으로는, 탄력적 IP 는 생성할 수 있는 개수가 한정되어 있습니다.
        한정 수량을 넘어가면 검색해서 AWS 에 요청하는 방법을 찾아보면 되고,
        탄력적 IP 는 만약 현재 실행중인 인스턴스에 할당되지 않은 상태로 존재한다면,
        그 자체로 유지비용의 요금이 발생합니다.

    3. 접속 보안 설정
        본 인스턴스는 말 그대로 개발자만 접속이 가능해야 하는 서버로,
        SSH 포트인 22 번 포트와, 각 개발자 툴 서비스 포트를 개발자 위치에만 공개해 두어야 합니다.

        보안 그룹 - 인바운드 규칙 - 인바운드 규칙 편집

        으로 이동하고,

        앞서 가이드 4번 글에서 했던대로, 허용할 포트와 ip 를 설정할 때,
        SSH 의 22 번 포트와,
        어드민 서버의 8081 포트를 현재 내 ip 에만 설정하고,
        추후에 접속 위치가 바뀔 때마다 수정하도록 합시다.

    4. OpenSSH 접속 및 기본 설정
        커맨드창을 열고,

        >> chmod 400 **(EC2 SSH 키페어 이름)**.pem

        를 입력해주고,

        >> ssh -i "**(EC2 SSH 키페어 이름)**.pem" ubuntu@1.1.1.1
        위와 같이 명령어를 입력합니다.

        접속 명령어 뒤의 ubuntu@1.1.1.1 부분은 연결할 유저명과 접속하려는 ip 주소를 입력하면 됩니다.
        ip주소는 앞서 각 인스턴스와 연결한 탄력적 ip를 사용하면 됩니다.
        유저명은 OS 별로 다른데,
        https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingPuTTY
        에서 참고하면 됩니다.

        먼저, 커맨드창 이름을 보기 쉽게 만들기 위해
        >> sudo hostnamectl set-hostname {인스턴스명}
        를 입력합니다.
        커맨드라인 별명을 적용을 시키려면 sudo reboot 를 사용해서 재부팅을 시키고 다시 접속하면 됩니다.

        그리고 EC2 시간을 기본인 UTC 에서 한국시간 KST로 바꿉니다.

        >> sudo rm /etc/localtime
        >> sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

        >> date
        를 입력해서 KST 시간이 나온되면 된 것입니다.

        >> sudo apt-get update
        >> sudo apt-get upgrade

        서버 가상 Ram 증가 :
        AWS 프리티어 인스턴스의 경우는 Ram 이 작아서 하드디스크 영역을 가상램으로 할당해서 임시로 램을 늘립니다.
        상대적으로 부족한 램 크기를 상대적으로 풍족한 롬 크기로 보완하는 것입니다.

        >> df -h
        로 하드디스크 용량 확인

        >> free
        로 메모리 swap 메모리 용량 확인

        >> sudo fallocate -l 8G /swapfile
        스왑 메모리 설정

        >> sudo chmod 600 /swapfile
        >> sudo mkswap /swapfile
        >> sudo swapon /swapfile

        재부팅시에도 유지하기 위해,
        >> sudo nano /etc/fstab
        를 열고,

        /swapfile swap swap defaults 0 0

        를 추가

        성공여부 확인
        >> free
        로 swap 영역확인

        >> sudo reboot
        재부팅 후 다시 접속하여

        >> free
        로 swap 영역확인

        도커 설치에 필요한 패키지 설치
        >> sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common

        도커 공식 GPG 키 추가
        >> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

        도커 공식 apt 저장소 추가
        >> sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

        시스템 패키지 업데이트
        >> sudo apt-get update

        도커 설치
        >> sudo apt-get install docker-ce docker-ce-cli containerd.io

        도커 실행 상태 확인
        >> sudo systemctl status docker

    5. 도커 이미지 파일 전달 및 실행
        앞서 생성했던 spring_admin.tar 파일을 EC2 에 전달해줍니다.

        >> scp -i "{pem 키 파일}" "{전송할 파일}" {아이디@전송할 서버주소}:"{저장될 서버의 디렉토리}"

        위와 같은 형태의 명령어를 실행시키면 됩니다.

        전달이 완료되어 EC2 인스턴스 SSH 에서 해당 파일을 확인했다면,

        >> sudo docker container stop server_dev
        >> sudo docker container rm server_dev
        >> sudo docker image prune -af

        위 명령어로 기존에 진행중일 수도 있는 도커 컨테이너 및 이미지를 제거하고,

        >> sudo docker load -i spring_admin.tar
        >> sudo docker container run -d -e TZ=Asia/Seoul --rm -p8081:8081 --name spring_admin raillylinker/spring_admin:latest

        위 명령어로 이미지 컨테이너를 실행시키면 됩니다.

        이제 해당 서버의 8081 서버로 접속하여 SpringAdmin 이 잘 동작하는지를 확인만 하면 완성입니다.