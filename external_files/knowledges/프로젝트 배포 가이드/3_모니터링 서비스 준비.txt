[모니터링 서비스 준비]
- 서버 상태 확인을 위해 모니터링 툴은 필수라 생각합시다.
    여기서는 Spring Admin 을 사용할 것이고,
    본 프로젝트는 Spring Admin Client 가 적용된 상태입니다.

- 준비
    1. https://github.com/RaillyLinker/SpringBoot_SpringAdmin
        위 레포지토리에서 모니터링 프로젝트를 가져오거나,
        스스로 만들면 됩니다.

    2. application.yml 에 어드민 설정을 합시다.
        server.port : 포트 번호를 설정합니다. 여기서는 8081 포트로 설정했습니다.
        spring.boot.admin.notify : Spring Admin 의 경고 메시지를 받을 이메일 주소를 입력합니다.
        security : 본 서비스를 사용할 계정의 아이디와 비밀번호를 설정합니다.
        mail : notify 에서 사용할 SMTP 정보를 입력합니다.

    3. 준비된 Admin 프로젝트를 실행시켜 동작을 확인하고,
        이상이 없다면,
        Gradle 작업 중 Tasks - build - jar 을 실행시키면,
        build/libs 디렉토리 안에,

        springboot_spring_admin-0.0.1-SNAPSHOT-plain.jar

        이와 비슷한 이름의 jar 파일이 생성되어 있을 것입니다.
        이 파일이 준비되었다면 이식 준비가 된 것으로, 이것을 실행시킬 컴퓨터로 복사한 후 실행시켜주면 됩니다.

- AWS EC2 에 배포하기
    1. AWS EC2 에, 앞서 준비된 jar 파일을 배포하려면,
        AWS 콘솔에서 EC2 항목으로 이동한 후,
        Developer_Tools
        라는 인스턴스를 만들어줄 것입니다.
        이 인스턴스에는 CI/CD 툴, 모니터링 툴 등의 개발자에게 필요한 서비스를 올려놓을 용도입니다.

        AWS 콘솔의 EC2 대시보드 화면에서 키페어를 누르고 키페어를 만들어줍니다.
        키페어는 EC2 인스턴스에 접속하기 위한 비밀번호를 저장한 파일과 같은 것인데,
        앞으로 이것을 사용하여 EC2 에 접속해서 조작할 것입니다.

        이름에는 임의의 이름을 넣고,
        키페어 유형은 RSA,
        프라이빗 키 파일 형식은, 저의 경우 OpenSSH 를 사용할 것이므로 .pem 형식으로 한 후,
        태그에서 키는 "name", 값은 앞서 이름과 동일하게 해주고 완료를 해주면 생성된 키페어가 다운로드 됩니다.

        이것을 잘 보관해둡시다.

        보관시에는, 개발자용 폴더를 하나 만들고 그 안에 Ec2 Secret Key 라는 디렉토리를 하나 더 만든 후 키페어 파일을 넣어줍니다.

        개발자 디렉토리에는 이번에 만들 EC2 인스턴스 정보를 저장할 텍스트 파일을 하나 만들어 주세요.
        텍스트 파일 이름은, 앞서 결정한 EC2 인스턴스 이름을 이용한,

        AWS EC2 Developer_Tools.txt

        라는 이름입니다.

    2.