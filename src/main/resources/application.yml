# (실행 환경 공통 설정)
# : 개발 환경에 상관 없이 공통으로 적용되는 설정

server:
  error:
    include-stacktrace: NEVER # 자세한 에러 명세는 클라이언트에게 전달하지 않기

spring:
  profiles:
    group: # 프로필 그룹 생성 - 새로운 프로필명에, 하위 프로필들을 조합. 생성한 그룹은 spring.config.activate.on-profile 에서 명시해줘야함
      local8080: local, port8080
      dev8080: dev, port8080
      prod80: prod, port80
    default: local8080 # jar 실행시 프로필 설정이 없을 때 적용할 프로필
    # IDE 실행 프로필 설정은, 실행 - 구성편집에서 VM 옵션 안에 -Dspring.profiles.active=dev8080 이렇게 설정 가능
    # prod 실행 포트를 나눠둔 이유는 배포 서버의 무중단 배포시 스위칭을 위한 것

springdoc: # swaggerdoc 설정
  model-and-view-allowed: true # ModelAndView 허용
  use-fqn: true # Schema 정보를 package 명까지 붙여서 보여주기
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
  cache:
    disabled: true

# spring admin 용 actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: "*" # open 할 actuator 경로 설정 (SecurityConfig 에선 actuator/** 허용, ActuatorEndpointFilter 에선 actuator/** IP 제한 설정)
  endpoint:
    health:
      show-details: always # actuator/health 에 디테일 정보 반환

customConfig: # 프로젝트 내에서 사용하는 커스텀 설정
  # cors 경로 리스트 설정 (설정하지 않으면 모든 요청 허용)
  corsList: http://localhost:8081, http://127.0.0.1:8081

  smtp: # SMTP 설정
    host: smtp.gmail.com # SMTP 호스트
    port: 587 # SMTP 포트
    senderName: contact@test.com # SMTP 계정 아이디
    senderPassword: test # SMTP 계정 비밀번호
    timeOutMillis: 10000 # 타임아웃 밀리초

  naverSms: # Naver SMS 설정
    accessKey: test
    secretKey: test
    serviceId: ncp:sms:kr:test:test
    phoneNumber: test

  swagger: # Swagger 문서 설정
    documentVersion: 1.0.0
    documentTitle: SpringBoot MVC Template APIs
    documentDescription:
      |
      **[읽어주세요]**

      **(공지)**
      - 오류 제보, 요청 사항 환영 합니다.

      **(일반 규칙)**
      - 본 프로젝트가 제공하는 API 중 응답 반환값이 있는 API 의 경우, 반환값인 Response Body 는 항상 Nullable 입니다.

        해당 API 가 정상적으로 동작을 하였다면 Http Status Code 200 과 더불어 Swagger 에 게시된 해당 API 의 Response Body 의 형태와 같은 결과값을 반환할 것이지만,

        만약 데이터를 반환하기 전에 데이터 반환 불가능한 상태(데이터베이스 조회시 원하는 데이터가 없는 상태 등)라면, 

        Http Status Code 204 와 더불어 Response Body 는 Null 이 될 것입니다.
      - Swagger 문서의 대분류는 컨트롤러(Controller)라고 합니다.

        컨트롤러는 일련번호가 매겨져 있고, C1, C2... 이런 식으로 표시됩니다.

        또한 컨트롤러 안의 소분류인 API 항목 역시 일련번호(Number)가 매겨져 있으며, N1, N2... 이런 식으로 표시됩니다.

        API 관련 요청을 할때는, "/service1/tk/v1/request-test/get-request" 이렇게 주소로 표현하거나 혹은, 

        "C2-N4 API", 혹은 "2-4 API" 와 같은 일련번호로 표현하여도 좋습니다.
      
        이미 API 에 할당된 일련번호는 API 가 삭제되는 경우는 있더라도, 절대 다른 API 에 할당되지 않으며,
      
        설령 API 순서를 맞추기 위하여 해당 번호가 필요한 경우에도, 
      
        N2.1, N2.11 과 같이 소수점을 할당하여 엄격히 지킬 것이므로, 
      
        클라이언트는 이를 기준으로 주석 관리, 코드 관리, 문서 정리, API 논의 등에 활용하시면 좋습니다.

      **(인증/인가 관련 규칙)**
      - API path tk/** 는 Token 인증/인가 방식을 사용하는 API 를 뜻하며, 나머지(특히 sc/**)는 세션-쿠키 인증/인가 방식을 사용합니다.
      - API 항목의 제목 문장의 마지막에 붙는 "<>" 는 해당 API 사용을 위한 권한을 의미합니다.

        예를들어 권한이 필요 없으면 표시 하지 않고, 로그인이 필요한 경우 <>, 

        특정 권한이 필요한 경우 <'ADMIN' or ('DEVELOPER' and 'MANAGER')> 와 같은 형식으로 표시됩니다.
      - <>? 이 붙는다면 해당 API 는 로그인이 필수는 아니지만 로그인 시와 비로그인 시의 결과값이 달라진다는 것을 의미합니다.

        <>? 이 붙은 API 를 호출할 때, 

        클라이언트에서는, 현재 로그인 되어있다면 인증/인가 토큰을 보내주면 되고, 로그인 되어있지 않다면 토큰을 보내주지 않으면 됩니다.
      
        토큰을 보내지 않았을 경우, API 는 비회원을 위한 동작 및 데이터를 반환할 것이고,
      
        토큰을 보냈을 경우는 회원을 위한 동작 및 데이터를 반환할 것인데,
      
        만약 토큰을 보내었을 때, 해당 토큰이 만료, 혹은 회원 정보 검증이 실패 되었다면, 
      
        비회원을 위한 동작 및 데이터 반환을 하는 것이 아니라,
      
        일반적인 로그인 필수 API 에서 토큰이 잘못된 경우와 동일한 응답(401 혹은 403 Status Code)을 반환할 것입니다.
      - tk/** 에서 로그인이 필요한 API 요청시엔 네트워크 요청 Header 에 "Authorization" 이란 키로 

        로그인 API 에서 반환된 토큰 타입과 토큰 String 을 붙여서 보내주면 됩니다.

        예를들어 로그인시 토큰 타입이 "Bearer", 토큰 String 이 "abcd1234" 로 반환되었다면,

            {"Header" : {"Authorization" : "Bearer abcd1234"}}

        위와 같은 형식으로, 토큰 타입 뒤에 한칸을 띄우고 토큰 String 을 합쳐서 헤더에 Authorization 이란 이름으로 보내면 됩니다.
      - <> 가 붙지 않은(로그인이 필요치 않은) API 에도 Authorization Request Header 를 보내줘도 무방합니다.

        로그인 제한이 붙지 않은 API 에서 인증/인가 코드를 입력한 경우, 

        액세스 토큰 형식이 잘못 되었건, 만료되었건 상관없이 API 로직이 정상 실행됩니다.
      - tk/** 에서 사용하는 RefreshToken 은 AccessToken 발급(Login, Reissue api 사용)시마다 재발행됩니다.

        AccessToken 보다 더 길게 설정된 RefreshToken 의 만료시간 동안 토큰 재발급을 전혀 하지 않아 RefreshToken 마저 만료된 경우, 

        만료된 RefreshToken 으로 토큰 재발급 API 를 사용시 만료 에러가 떨어지는데, 이때는 클라이언트 측에서 멤버에게 재로그인을 요청해야합니다.
      
      **(Dummy API)**
        - 프로젝트 개발 진행 시작 시점에 백엔드 개발자는 API 를 하나씩 구현하는 것이 아니라 인터페이스를 먼저 공개할 것입니다.
      
          이 인터페이스는 스웨거 문서에 표시되며, 요청시 데이터를 반환하지만, 해당 데이터는 하드코딩으로 심어둔 상수값(더미 데이터)일 뿐입니다.
      
          이렇듯, 아직 완성되지 않은 인터페이스와 더미 데이터를 먼저 공개하는 이유는,
      
          서버의 API 설계가 완료되어야만 클라이언트에서 API 요청 로직을 개발할 수 있기 때문에,
      
          최대한 빠르게 인터페이스를 공개하여 해당 API 를 클라이언트 개발에 사용할 수 있도록 하여, 전체 프로젝트 개발기간을 단축하는 것이 목적이며,
      
          백엔드 개발자의 입장에서는 놓칠 수 있는 부분에 대한 프론트 엔드 개발자의 수정 요청을, 
      
          API 구현 전의 시점에 얻을 수 있기에 상호간 이득을 얻을 수 있는 방법이기 때문입니다.
        - 더미 API 에 대한 스웨거 문서 내 표시 방법에 대해 설명하겠습니다.
      
          Controller 안에 속한 각 API 목록이 있습니다.
      
          그리고 각 API 목록별로 표시된 메소드, 주소의 오른쪽에는 N1, N2 와 같이 API 고유번호와 그 설명이 적혀있습니다.
      
          해당 설명의 가장 우측에 (설계중), 혹은 (더미) 라는 상태 태그를 붙일 것입니다.
      
          만약 (설계중) 이라고 붙은 API 는 할당된 API 고유 번호를 제외하고는 변경될 가능성이 존재하기 때문에 프론트 엔드 개발에서 무시하셔도 됩니다.
      
          (더미) 라고 붙은 API 의 경우는 추후 구현이 완료될 것이며, 상의없이 인터페이스를 변경할 일은 없기 때문에 프론트 엔드 개발에 사용하셔도 됩니다.
      
          구현까지 완료된 API 는 상태 태그를 제거할 것입니다.