# (실행 환경 공통 설정)
# : 개발 환경에 상관 없이 공통으로 적용되는 설정

server:
  error:
    include-stacktrace: NEVER # 자세한 에러 명세는 클라이언트에게 전달하지 않기

spring:
  profiles:
    group: # 프로필 그룹 생성 - 새로운 프로필명에, 하위 프로필들을 조합. 생성한 그룹은 spring.config.activate.on-profile 에서 명시해줘야함
      local8080: local, port8080
      dev8080: dev, port8080
      prod80: prod, port80
    default: local8080 # jar 실행시 프로필 설정이 없을 때 적용할 프로필
    # IDE 실행 프로필 설정은, 실행 - 구성편집에서 VM 옵션 안에 -Dspring.profiles.active=dev8080 이렇게 설정 가능
    # prod 실행 포트를 나눠둔 이유는 배포 서버의 무중단 배포시 스위칭을 위한 것

springdoc: # swaggerdoc 설정
  model-and-view-allowed: true # ModelAndView 허용
  use-fqn: true # Schema 정보를 package 명까지 붙여서 보여주기
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
  cache:
    disabled: true

# spring admin 용 actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: "*" # open 할 actuator 경로 설정 (SecurityConfig 에선 actuator/** 허용, ActuatorEndpointFilter 에선 actuator/** IP 제한 설정)
  endpoint:
    health:
      show-details: always # actuator/health 에 디테일 정보 반환

customConfig: # 프로젝트 내에서 사용하는 커스텀 설정
  # cors 경로 리스트 설정 (설정하지 않으면 모든 요청 허용)
  corsList: http://localhost:8081, http://127.0.0.1:8081

  smtp: # SMTP 설정
    host: smtp.gmail.com # SMTP 호스트
    port: 587 # SMTP 포트
    senderName: contact@test.com # SMTP 계정 아이디
    senderPassword: test # SMTP 계정 비밀번호
    timeOutMillis: 10000 # 타임아웃 밀리초

  naverSms: # Naver SMS 설정
    accessKey: test
    secretKey: test
    serviceId: ncp:sms:kr:test:test
    phoneNumber: test

  swagger: # Swagger 문서 설정
    documentVersion: 1.0.0
    documentTitle: SpringBoot MVC Template APIs
    documentDescription:
      |
      **[읽어주세요]**

      **(공지)**
      - 오류 제보, 요청 사항 환영 합니다.

      **(일반 규칙)**
      - 본 프로젝트가 제공하는 API 중 반환값이 있는 API 의 반환값 데이터 형태는 Null 혹은 정해진 한가지 형태 뿐입니다.
      - 본 프로젝트가 제공하는 API 중 반환값이 있는 API 의 경우, 반환값인 Response Body 는 항상 Nullable 입니다.

        만약 정상적으로 동작을 하였다면 Http Status Code 200 과 더불어 Swagger 에 게시된 해당 API 의 Response Body 의 형태와 같은 결과값을 반환할 것이며,

        만약 데이터를 반환하기 전에 Exception 발생, 데이터 반환 불가능한 상태 등의 이유로 결과값을 반환할 수 없다면,

        Http Status Code 500, 혹은 204 와 더불어 Response Body 는 Null 이 될 것입니다.
      - Swagger 문서의 대분류는 컨트롤러(Controller)라고 합니다.

        컨트롤러는 일련번호가 매겨져 있고, C1, C2... 이런 식으로 표시됩니다.

        또한 컨트롤러 안의 소분류인 API 항목 역시 일련번호(Number)가 매겨져 있으며, N1, N2... 이런 식으로 표시됩니다.

        API 관련 요청을 할때는, "/service1/tk/v1/request-test/get-request" 이렇게 주소로 표현하거나 혹은, 

        "C2-N4 API", 혹은 "2-4 API" 와 같은 일련번호로 표현하여도 좋습니다.
      
        이미 API 에 할당된 일련번호는 절대 다른 API 에 할당되지 않으며,
      
        설령 API 순서를 맞추기 위하여 해당 번호가 필요한 경우에도, N2.1, N2.11 과 같이 소수점을 할당하여 엄격히 지킬 것입니다.
      - 본 서버에서 제공하는 Rest API 의 Response Header 에는 api-result-code 라는 키가 포함될 수 있습니다.

        각 API 별 HTTP Status 별 반환될 수 있는 "api-result-code" 는 Swagger 문서에 기록되므로 참고하세요.
      - Input Json String 표기법

        multipart/form-data 형식에서 Object List 타입의 데이터를 수집할 때나 RequestBody 를 사용 불가능한 Get Method 에서 복잡한 input 을 받을 때에는,

        request 에 json 형식의 request body 를 그대로 받을수 없기에 json 형식의 String 을 통해 정보를 전달해야합니다.

        사용자가 입력한 json 형식 string 을 서버에서 해석하여 데이터를 분리할 것이기에, 

        json String 을 입력할 때에 지켜야할 데이터 형식을 API 의 jsonString 파라미터 설명에 적을 것입니다.

        표기법은 kotlin 의 data class 를 사용할 것입니다.

        표기 예시로,

            data class SampleInputVo(
      
              @Schema(description = "샘플 텍스트", example = "sampleTextExample")
      
              @JsonProperty("sample-text")
      
              val sampleText: String,
      
              @Schema(description = "샘플 숫자", example = "1")
      
              @JsonProperty("sample-int")
      
              val sampleInt: Int?,
      
              @Schema(description = "샘플 불린", example = "1")
      
              @JsonProperty("sampleBool")
      
              val sampleBoolean: Boolean
      
            )

        위와 같습니다.

        해석법은 아래와 같습니다.

        data class 는 클래스 선언을 뜻하며, SampleInputVo 는 서버 내에서 사용하는 클래스명입니다. 

        @Schema 태그 부터 다음 @Schema 태그 앞까지는 한 변수와 그에 대한 설명의 세트를 의미합니다.

        @Schema 태그의 속성인 description 은 변수의 설명, example 은 변수의 입력값 예시(타입 상관 없이 "" 로 묶임) 를 뜻하며,

        @JsonProperty 태그는 입력값 변수명으로, 아래의 val sampleText 와 같은 코틀린 코드 내부 변수명 대신 이것을 API 요청 입력값으로 사용하면 됩니다.

        val sampleText: String 부분의 경우는 val 은 코드 내 변수 선언 키워드이고, sampleText 는 코틀린 코드 내부에서 사용하는 변수명이며, 

        : 뒤의 String, Int, List, Boolean 과 같은 표기는 변수타입, 변수타입 뒤의 ? 가 붙어있으면 nullable, 붙어있지 않다면 not nullable 이라는 뜻입니다.

        고로 위의 예시의 경우 json String 은

            {"sample-text": "샘플 텍스트",  "sample-int": 1, "sampleBool" : true}

        혹은

            {"sample-text": "샘플 텍스트",  "sample-int": null, "sampleBool" : false}

        위와 같은 json 형식의 string 으로 입력하면 됩니다.

        클라이언트에서 사용하는 각 프로그래밍 언어별 지원해주는 JsonString <-> Object 라이브러리를 사용하면 편하게 입력 처리가 가능합니다.

      **(인증/인가 관련 규칙)**
      - API path tk/** 는 Token 인증/인가 방식을 사용하는 API 를 뜻하며, 나머지(특히 sc/**)는 세션-쿠키 인증/인가 방식을 사용합니다.
      - API 항목의 제목 문장의 마지막에 붙는 "<>" 는 해당 API 사용을 위한 권한을 의미합니다.

        예를들어 권한이 필요 없으면 표시 하지 않고, 로그인이 필요한 경우 <>, 

        특정 권한이 필요한 경우 <'ADMIN' or ('DEVELOPER' and 'MANAGER')> 와 같은 형식으로 표시됩니다.
      - <>? 이 붙는다면 해당 API 는 로그인이 필수는 아니지만 로그인 시와 비로그인 시의 결과값이 달라진다는 것을 의미합니다.

        <>? 이 붙은 API 를 호출할 때, 

        클라이언트에서는, 현재 로그인 되어있다면 인증/인가 토큰을 보내주면 되고, 로그인 되어있지 않다면 토큰을 보내주지 않으면 됩니다.
      - tk/** 에서 로그인이 필요한 API 요청시엔 네트워크 요청 Header 에 "Authorization" 이란 키로 

        로그인 API 에서 반환된 토큰 타입과 토큰 String 을 붙여서 보내주면 됩니다.

        예를들어 로그인시 토큰 타입이 "Bearer", 토큰 String 이 "abcd1234" 로 반환되었다면,

            {"Header" : {"Authorization" : "Bearer abcd1234"}}

        위와 같은 형식으로, 토큰 타입 뒤에 한칸을 띄우고 토큰 String 을 합쳐서 헤더에 Authorization 이란 이름으로 보내면 됩니다.
      - <> 가 붙지 않은(로그인이 필요치 않은) API 에도 Authorization Request Header 를 보내줘도 무방합니다.

        로그인이 붙지 않은 API 에서 인증/인가 코드를 입력한 경우, 

        액세스 토큰 형식이 잘못 되었건, 만료되었건 상관없이 API 로직이 정상 실행됩니다.

        다만, Authorization Request Header 가 보내졌다면 서버에선 이에 대한 검증을 자동으로 진행하게 되므로 필요치 않은 작업을 하는 것이 되므로,

        요청하지 않은 Header 정보는 보내주지 않는 것을 권장하는 바입니다.
      - tk/** 에서 사용하는 RefreshToken 은 AccessToken 발급(Login, Reissue api 사용)시마다 재발행됩니다.

        AccessToken 보다 더 길게 설정된 RefreshToken 의 만료시간 동안 토큰 재발급을 전혀 하지 않아 RefreshToken 마저 만료된 경우, 

        만료된 RefreshToken 으로 reissue api 를 사용시엔 만료 에러가 떨어지는데, 이때는 클라이언트 측에서 멤버에게 재로그인을 요청해야합니다.
      - JWT 사용 관련 클라이언트 측 처리 알고리즘은 아래를 참고하시면 됩니다.

        1. 클라이언트 비휘발성 저장소 안에,

                class LoginInfoVo {
                  String memberUid; // 멤버 고유값
                  String nickName; // 닉네임
                  String tokenType; // 발급받은 토큰 타입(ex : "Bearer")
                  String accessToken; // 액세스 토큰 (ex : "aaaaaaaaaa111122223333")
                  String accessTokenExpireWhen; // 액세스 토큰 만료일시 (ex : "2023-01-02 11:11:11.111")
                  String refreshToken; // 리프레시 토큰 (ex : "rrrrrrrrrr111122223333")
                  String refreshTokenExpireWhen; // 리프레시 토큰 만료일시 (ex : "2023-01-02 11:11:11.111")
                }

            위와 같은 형태로 인증 / 인가 정보와 회원 정보를 저장하도록 준비합니다.
      
            위 저장소가 null 이라면 현재 비회원 상태, not null 이라면 현재 회원 로그인 상태입니다.
      
            즉, 위 저장소를 채우는 것이 로그인, 위 저장소를 비우는 것이 로그아웃입니다.

        2. 서버가 공개한 로그인 API 로 로그인을 했다면, 서버가 반환하는 정보를 위의 저장소에 저장합니다.

        3. 로그인이 필요한 API 에 요청을 보낼시, 

            먼저 로그인 정보 저장소에 정보가 저장되어 있는지(= 로그인이 되어있는지) 확인합니다.
      
            만약 비회원 상태라면 해당 API 를 사용할 수 없으니 유저에게 로그인을 요청하고, 
      
            회원 상태라면 Request Header 의 Authorization 키 안에 "{totenType} {accessToken}" 을 실어 보냅니다.

        4. Authorization 을 보낸 API 에서 응답이 왔을 때 다음과 같은 신호가 올 수 있습니다. 

            - 액세스 토큰 만료 신호
      
              말 그대로 현재 전송한 액세스 토큰이 만료된 경우입니다.
      
              이때는 저장 되어 있는 리프레시 토큰으로 액세스 토큰 재발급을 요청합니다.
      
              이에대한 응답으로 리프레시 토큰이 만료되었다는 신호가 온다면 로그아웃 처리 후 유저에게 재로그인을 요청합니다.
      
              재발급이 완료되었다면 로그인 정보 저장소의 정보들을 갱신하고, 
      
              최신 로그인 정보로 다시 요청을 보냅니다. 
      
            - 회원 정보가 없다는 신호
      
              이는 액세스 토큰을 발급받은 시점에는 회원가입이 되어있다가 모종의 이유로 회원 정보가 삭제된 경우입니다.
      
              로그아웃 처리 후 유저에게 에러 정보를 전달하고 다른 계정으로 재로그인을 요청하면 됩니다.
      
            - 올바르지 않은 액세스 토큰 신호
      
              전송한 액세스 토큰의 형태가 올바르지 않은 경우입니다.
      
              사전에 테스트를 완료했다면 일어날 일이 없어보이지만, 
      
              서버에서 정보 유출 등의 이유로 암호화 키를 변경하거나, 토큰 형태를 변경하거나, 유효기간을 변경하는 등의 경우에 일어날 수 있습니다.
      
              로그아웃 처리 후 유저에게 에러 정보를 전달하고 재로그인을 요청하면 됩니다.
      
            - 권한이 충족되지 않은 신호 (403)
      
              로그인이 되었더라도 해당 계정이 API 가 요구하는 권한을 충족하지 못하는 경우에 나타납니다.
      
              권한이 없다는 정보를 유저에게 전달하면 됩니다.
      
              위와 같이 각각의 상황에 대해 처리를 해주세요.

        5. 인증 / 인가 관련 에러가 발생하지 않았다면 정상 처리를 진행하면 됩니다.
      - Swagger 토큰 인증이 필요한 API(tk/**) 테스트를 하기 위해선,

        아래의 Authorize 버튼 혹은 각 API 의 자물쇠 버튼을 누르고 value 에 해당 권한의 토큰을 넣어서 로그인 한 후 요청을 보내면 됩니다.

        이땐 Bearer 과 같은 토큰 타입을 붙이지 않고 순수 토큰 String 만을 입력합니다. (ex : "abcd1234")
      
      **(Label 데이터와 Code 데이터)**
      - 서버 개발자는 기획상 화면을 중시하여 인터페이스를 설계할 것입니다.
      
        화면상 "예" / "아니오" 라고 표시되는 상황이라면,
      
        인터페이스에는 String 타입의 변수로, "예" / "아니오" 를 반환할 것이므로 클라이언트 개발자분은 이를 그대로 화면에 사용하면 됩니다.
      
        화면에 표시하기 위한 용도의 변수, 이를 'Label 데이터'라 부르겠습니다.
      - Label 데이터로 인하여, "예" / "아니오" -> "맞아요" / "달라요" 와 같은 표현 방식의 변경이 있을 때, 
      
        서버측에서만 신경을 쓰면 되기에 관리 및 수정이 용이할 것입니다.
      
        관리 및 수정이 용이하도록 서버측에 변경 가능 부분의 처리를 집약해놓은 것이므로, 클라이언트 개발자는 이를 플래그로 사용해서는 안됩니다.
      
        예를들어 if(labelData = "예"){...} else {...} 이런식으로 처리를 해버리면,
      
        추후 서버에서 이 값을 변경했을 때, 클라이언트 측에서 에러가 발생하므로, Label 데이터를 사용하는 의미가 퇴색됩니다.
      
        대신, 서버에서는 코드 내 조건문에 사용될, 의미가 변하지 않는 고유 값을 내려줄 것입니다.
      
        예를들어 "예" 에 해당하는 긍정 의미는 1, "아니오" 에 해당하는 부정 의미는 0 으로 내려주면,
      
        추후 Label 데이터의 표현 방식이 달라져도 클라이언트 측에서는 수정할 필요가 없어질 것입니다.
      
        클라이언트 어플리케이션의 프로그래밍 로직에 사용될 이러한 변수를 'Code 데이터'라고 부르겠습니다.
      - 서버 개발자로서 최대한 신경을 써가며 인터페이스를 설계를 할 것이지만,
      
        이러한 요소는 기획서의 표면에 나타나지 않으므로, 
      
        Label 데이터와 Code 데이터의 분리가 잘 이루어지지 않는 경우가 발견 될 수 있습니다.
      
        클라이언트 개발 도중 이러한 개선점이 필요하다고 생각하신다면 프로젝트 전체 구조의 개선을 위하여 인터페이스 수정 요청을 부탁드립니다.